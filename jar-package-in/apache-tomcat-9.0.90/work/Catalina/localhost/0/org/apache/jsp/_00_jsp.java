/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.90
 * Generated at: 2024-07-03 03:30:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _00_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"zh-CN\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>JSP 标签初学者指南</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            background-color: #f4f4f4;\r\n");
      out.write("        }\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("        }\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("        }\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #4CAF50;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        td {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>JSP 标签初学者指南</h1> <!-- 标题 -->\r\n");
      out.write("    <table>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>标签</th> <!-- 表头 -->\r\n");
      out.write("            <th>示例</th> <!-- 表头 -->\r\n");
      out.write("            <th>说明</th> <!-- 表头 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;a&gt;</td> <!-- 超链接标签 -->\r\n");
      out.write("            <td><a href=\"https://www.example.com\" target=\"_blank\">示例链接</a></td> <!-- 链接示例，打开新窗口 -->\r\n");
      out.write("            <td>超链接，用于跳转到另一个页面</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;button&gt;</td> <!-- 按钮标签 -->\r\n");
      out.write("            <td><button>示例按钮</button></td> <!-- 按钮示例 -->\r\n");
      out.write("            <td>按钮元素</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;input type=\"text\"&gt;</td> <!-- 输入标签 -->\r\n");
      out.write("            <td><input type=\"text\" placeholder=\"请输入文本\"></td> <!-- 输入示例 -->\r\n");
      out.write("            <td>输入框，用于接收用户输入</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;input type=\"radio\"&gt;</td> <!-- 单选按钮标签 -->\r\n");
      out.write("            <td>\r\n");
      out.write("                <input type=\"radio\" name=\"option\" value=\"1\"> 选项 1\r\n");
      out.write("                <input type=\"radio\" name=\"option\" value=\"2\"> 选项 2\r\n");
      out.write("            </td> <!-- 单选按钮示例 -->\r\n");
      out.write("            <td>单选按钮，用于选择一个选项</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;input type=\"checkbox\"&gt;</td> <!-- 复选框标签 -->\r\n");
      out.write("            <td>\r\n");
      out.write("                <input type=\"checkbox\" name=\"check1\" value=\"A\"> 选项 A\r\n");
      out.write("                <input type=\"checkbox\" name=\"check2\" value=\"B\"> 选项 B\r\n");
      out.write("            </td> <!-- 复选框示例 -->\r\n");
      out.write("            <td>复选框，用于选择多个选项</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;select&gt;</td> <!-- 下拉菜单标签 -->\r\n");
      out.write("            <td>\r\n");
      out.write("                <select>\r\n");
      out.write("                    <option value=\"1\">选项 1</option>\r\n");
      out.write("                    <option value=\"2\">选项 2</option>\r\n");
      out.write("                    <option value=\"3\">选项 3</option>\r\n");
      out.write("                </select>\r\n");
      out.write("            </td> <!-- 下拉菜单示例 -->\r\n");
      out.write("            <td>下拉菜单，用于选择一个选项</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;img&gt;</td> <!-- 图片标签 -->\r\n");
      out.write("            <td><img src=\"https://via.placeholder.com/100\" alt=\"示例图片\"></td> <!-- 图片示例 -->\r\n");
      out.write("            <td>图片元素</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;p&gt;</td> <!-- 段落标签 -->\r\n");
      out.write("            <td><p>这是一个段落。</p></td> <!-- 段落示例 -->\r\n");
      out.write("            <td>段落元素，用于文本内容</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>&lt;h1&gt; - &lt;h6&gt;</td> <!-- 标题标签 -->\r\n");
      out.write("            <td>\r\n");
      out.write("                <h1>标题 1</h1> <!-- 标题 1 示例 -->\r\n");
      out.write("                <h2>标题 2</h2> <!-- 标题 2 示例 -->\r\n");
      out.write("                <h3>标题 3</h3> <!-- 标题 3 示例 -->\r\n");
      out.write("            </td>\r\n");
      out.write("            <td>标题元素，从 <code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> 逐级递减</td> <!-- 说明 -->\r\n");
      out.write("        </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
